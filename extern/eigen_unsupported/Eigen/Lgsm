// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2009-2011 CEA LIST (DIASI/LSI) <xde-support@saxifrage.cea.fr>
//
// Eigen is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// Eigen is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License or the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License and a copy of the GNU General Public License along with
// Eigen. If not, see <http://www.gnu.org/licenses/>.

#ifdef WIN32
 #undef min
 #undef max
#endif

//Eigen include
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <Eigen/StdVector>

namespace Eigen {

// forward declaration

template<class G, class Derived> class LieGroupBase;
template<class G> class LieGroup;

template<class A, class Derived> class LieAlgebraBase;
template<class A, class Derived> class LieAlgebraDualBase;
template<class A> class LieAlgebraDual;
template<class A> class LieAlgebra;

//lgsm include
#include "src/Lgsm/util/Macros.h"
#include "src/Lgsm/LieGroup.h"
#include "src/Lgsm/LieAlgebra.h"

#include "src/Lgsm/LieGroup_SO3.h"
#include "src/Lgsm/LieAlgebra_so3.h"
#include "src/Lgsm/LieGroup_SE3.h"
#include "src/Lgsm/LieAlgebra_se3.h"

// forward declaration

template<class Derived> class DisplacementBase;
template<class Derived> class WrenchBase;
template<class Derived> class TwistBase;

template<typename Scalar> class Displacement;
template<typename Scalar> class Wrench;
template<typename Scalar> class Twist;
	
#include "src/Lgsm/Rotation3D.h"
#include "src/Lgsm/Rotations.h"
#include "src/Lgsm/Displacement.h"
#include "src/Lgsm/AngularVelocity.h"
#include "src/Lgsm/Torque.h"
#include "src/Lgsm/Twist.h"
#include "src/Lgsm/Wrench.h"
#include "src/Lgsm/SE3CubicInterpolator.h"

}
